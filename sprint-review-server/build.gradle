buildscript {
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'war'

mainClassName = 'com.sprintreview.ServerKt'

sourceCompatibility = 1.8

compileKotlin { kotlinOptions.jvmTarget = "1.8" }
compileTestKotlin { kotlinOptions.jvmTarget = "1.8" }

kotlin { experimental { coroutines "enable" } }

dependencies {
  compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  compile "com.beust:klaxon:$klaxon_version"
  compile "io.ktor:ktor-server-netty:$ktor_version"
  compile "io.ktor:ktor-server-servlet:$ktor_version"
  compile "io.ktor:ktor-client-apache:$ktor_version"
  compile "io.ktor:ktor-html-builder:$ktor_version"
  compile "io.ktor:ktor:$ktor_version"
  compile "io.ktor:ktor-gson:$ktor_version"
  compile "io.ktor:ktor-auth:$ktor_version"
  compile "io.ktor:ktor-locations:$ktor_version"
  compile "com.github.jsimone:webapp-runner:$runner_version"
  compile "ch.qos.logback:logback-classic:$logback_version"
  compile "org.litote.kmongo:kmongo:$kmongo_version"
  compile "com.github.pgutkowski:kgraphql:$kgraphql_version"
  compile "org.elasticsearch.client:transport:$es_version"
  testCompile "io.ktor:ktor-server-test-host:$ktor_version"
  testCompile "com.willowtreeapps.assertk:assertk:$assertk_version"
  testCompile "org.testcontainers:testcontainers:$testcontainers_version"
}

configurations {
  testOutput.extendsFrom(testCompile)
  boot
}

jar {
  manifest {
    attributes "Main-Class": "$mainClassName"
  }
  zip64 = true
  from {
    configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  }
}

sourceSets {
  main.kotlin.srcDirs += "src/main/kotlin"
  test.kotlin.srcDirs += "src/test/kotlin"
}

task copyToLib(type: Copy) {
  into "$buildDir/server"
  from(configurations.compile) {
    include "webapp-runner*"
  }
}

task deployWeb(type: Copy) {
  from fileTree("../sprint-review-client/build")
  into "src/main/resources/static"
}

war.mustRunAfter deployWeb

task stage {
  dependsOn clean, deployWeb, war, installDist, copyToLib
}

clean.delete << file('src/main/resources/static')
clean.delete << file('../target')
